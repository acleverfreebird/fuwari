---
import "@fontsource-variable/jetbrains-mono";
import "@fontsource-variable/jetbrains-mono/wght-italic.css";

interface Props {
	class: string;
}
const className = Astro.props.class;
---
<div data-pagefind-body class={`prose dark:prose-invert prose-base !max-w-none custom-md ${className}`}>
    <!--<div class="prose dark:prose-invert max-w-none custom-md">-->
    <!--<div class="max-w-none custom-md">-->
    <slot/>
</div>

<script>
// 复制代码功能（保持原有逻辑）
document.addEventListener("click", function (e: MouseEvent) {
    const target = e.target as Element | null;
    if (target && target.classList.contains("copy-btn")) {
        const preEle = target.closest("pre");
        const codeEle = preEle?.querySelector("code");
        const code = Array.from(codeEle?.querySelectorAll(".code:not(summary *)") ?? [])
            .map(el => el.textContent)
            .map(t => t === "\n" ? "" : t)
            .join("\n");
        navigator.clipboard.writeText(code);

        const timeoutId = target.getAttribute("data-timeout-id");
        if (timeoutId) {
            clearTimeout(parseInt(timeoutId));
        }

        target.classList.add("success");

        // 设置新的timeout并保存ID到按钮的自定义属性中
        const newTimeoutId = setTimeout(() => {
            target.classList.remove("success");
        }, 1000);

        target.setAttribute("data-timeout-id", newTimeoutId.toString());
    }
});

/**
 * 初始化代码块折叠/展开功能
 * 新逻辑：查找带有collapsible-pre类的pre元素，将按钮从pre内部移到外部
 */
function initCodeBlockCollapse() {
    const collapsiblePres = document.querySelectorAll<HTMLPreElement>("pre.collapsible-pre");
    
    collapsiblePres.forEach(preElement => {
        // 查找pre内部的展开按钮
        const expandBtn = preElement.querySelector<HTMLButtonElement>(".code-expand-btn");
        if (!expandBtn) {
            return;
        }

        // 将按钮从pre内部移到外部（在.expressive-code容器内）
        const expressiveCodeContainer = preElement.closest(".expressive-code");
        if (expressiveCodeContainer) {
            // 从pre中移除按钮
            expandBtn.remove();
            // 将按钮添加到.expressive-code容器的末尾
            expressiveCodeContainer.appendChild(expandBtn);
        }

        // 绑定点击事件
        expandBtn.addEventListener("click", () => toggleCodeBlock(preElement, expandBtn));
        
        // 支持键盘操作
        expandBtn.addEventListener("keydown", (e: KeyboardEvent) => {
            if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                toggleCodeBlock(preElement, expandBtn);
            }
        });
    });
}

/**
 * 切换代码块的折叠/展开状态
 */
function toggleCodeBlock(preElement: HTMLPreElement, button: HTMLButtonElement) {
    const isCollapsed = preElement.dataset.collapsed === "true";
    
    // 切换状态
    preElement.dataset.collapsed = (!isCollapsed).toString();
    
    // 更新按钮的ARIA属性
    button.setAttribute("aria-expanded", isCollapsed.toString());
    button.setAttribute("aria-label", isCollapsed ? "收起代码" : "展开代码");
    
    // 切换按钮文本显示
    if (isCollapsed) {
        button.classList.add("expanded");
    } else {
        button.classList.remove("expanded");
    }
}

// 页面加载时初始化
if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initCodeBlockCollapse);
} else {
    initCodeBlockCollapse();
}

// 支持Swup页面导航后重新初始化
document.addEventListener("astro:page-load", initCodeBlockCollapse);
</script>
