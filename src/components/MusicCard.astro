---
import type { MusicItem } from "@/types/config";

interface Props {
	music: MusicItem;
	isPlaying: boolean;
	isActive: boolean;
}

const { music, isPlaying = false, isActive = false } = Astro.props;
---

<div
  class:list={[
    "music-card relative overflow-hidden rounded-xl transition-all duration-300 cursor-pointer group card-base",
    { "active": isActive }
  ]}
  data-music-id={music.id}
>
  <div class="relative">
    <img
      src={music.coverUrl}
      alt={`${music.title} - ${music.artist}`}
      class:list={[
        "w-full h-auto aspect-square object-cover transition-all duration-500 rounded-t-xl",
        { "spinning": isPlaying && isActive }
      ]}
      loading="lazy"
    />
    <div class="absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center rounded-t-xl">
      {isPlaying && isActive ? (
        <button class="play-pause-btn text-white p-3 rounded-full bg-primary bg-opacity-80 hover:bg-opacity-100 transition-all duration-300">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-8 h-8">
            <rect x="6" y="4" width="4" height="16"></rect>
            <rect x="14" y="4" width="4" height="16"></rect>
          </svg>
        </button>
      ) : (
        <button class="play-pause-btn text-white p-3 rounded-full bg-primary bg-opacity-80 hover:bg-opacity-100 transition-all duration-300">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-8 h-8">
            <polygon points="5 3 19 12 5 21 5 3"></polygon>
          </svg>
        </button>
      )}
    </div>
  </div>

  <div class="p-4 text-black/90 dark:text-white/90">
    <h3 class="text-lg font-semibold line-clamp-1 group-hover:text-primary transition-colors">{music.title}</h3>
    <p class="text-sm text-black/60 dark:text-white/60 mt-1">{music.artist}</p>
    <p class="text-xs text-black/50 dark:text-white/50 mt-0.5">{music.album}</p>
    <div class="flex justify-between items-center mt-3">
      <span class="text-xs text-black/70 dark:text-white/70 bg-black/5 dark:bg-white/10 px-2 py-1 rounded-md">{music.duration}</span>
      {isActive && (
        <div class="audio-waves flex items-center space-x-0.5">
          <span class:list={["wave-bar h-2 w-0.5 bg-[var(--primary)] rounded-full", { "animate-music-wave": isPlaying }]} style="animation-delay: 0ms;"></span>
          <span class:list={["wave-bar h-3 w-0.5 bg-[var(--primary)] rounded-full", { "animate-music-wave": isPlaying }]} style="animation-delay: 100ms;"></span>
          <span class:list={["wave-bar h-4 w-0.5 bg-[var(--primary)] rounded-full", { "animate-music-wave": isPlaying }]} style="animation-delay: 200ms;"></span>
          <span class:list={["wave-bar h-2 w-0.5 bg-[var(--primary)] rounded-full", { "animate-music-wave": isPlaying }]} style="animation-delay: 300ms;"></span>
        </div>
      )}
    </div>
  </div>
</div>

<style>
  .music-card {
    height: 100%;
    display: flex;
    flex-direction: column;
    transition: all 0.3s ease;
    border: 1px solid var(--color-border);
  }

  .music-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.05);
  }

  .music-card.active {
    border-color: hsl(var(--hue), 65%, 60%);
    box-shadow: 0 0 0 1px hsl(var(--hue), 65%, 60%), 0 10px 25px -5px rgba(0, 0, 0, 0.1);
  }

  .spinning {
    animation: spin 8s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .audio-waves {
    height: 16px;
  }

  @keyframes music-wave {
    0%, 100% {
      height: 4px;
    }
    50% {
      height: 16px;
    }
  }

  .animate-music-wave {
    animation: music-wave 1s ease infinite;
  }
</style>

<script>
  // 客户端交互逻辑将在MusicPlayer组件中实现
</script>